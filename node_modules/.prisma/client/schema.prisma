// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Book {
  id              Int      @id @default(autoincrement())
  title           String
  author          String
  isbn            String?  @unique
  genre           String?
  publicationYear Int?
  publisher       String?
  pages           Int?
  language        String?
  availableCopies Int      @default(0)
  totalCopies     Int      @default(1)
  location        String?
  description     String?
  coverUrl        String?
  addedDate       DateTime @default(now())
  lastUpdated     DateTime @updatedAt

  // Relacionamentos
  loans        Loan[]
  reservations Reservation[]

  @@index([isbn])
  @@index([author])
  @@index([genre])
  @@map("books")
}

model User {
  id               Int        @id @default(autoincrement())
  name             String
  email            String     @unique
  password         String
  phone            String?
  address          String?
  age              Int?
  userType         UserType
  registrationDate DateTime   @default(now())
  lastActivity     DateTime   @updatedAt
  borrowedBooks    Int[]      @default([])
  reservedBooks    Int[]      @default([])
  fines            Decimal    @default(0) @db.Decimal(10, 2)
  status           UserStatus @default(ACTIVE)

  // Relacionamentos
  loans        Loan[]
  reservations Reservation[]

  @@index([email])
  @@map("users")
}

model Loan {
  id           Int        @id @default(autoincrement())
  userId       Int
  bookId       Int
  loanDate     DateTime   @default(now())
  dueDate      DateTime
  returnDate   DateTime?
  status       LoanStatus @default(ACTIVE)
  renewalCount Int        @default(0)
  maxRenewals  Int        @default(2)
  fine         Decimal    @default(0) @db.Decimal(10, 2)
  notes        String?

  // Relacionamentos
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([bookId])
  @@index([status])
  @@index([dueDate])
  @@map("loans")
}

model Reservation {
  id              Int               @id @default(autoincrement())
  userId          Int
  bookId          Int
  reservationDate DateTime          @default(now())
  expirationDate  DateTime
  status          ReservationStatus @default(ACTIVE)
  priority        Int               @default(1)
  notified        Boolean           @default(false)

  // Relacionamentos
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([bookId])
  @@index([status])
  @@map("reservations")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdDate DateTime @default(now())
  booksCount  Int      @default(0)

  @@map("categories")
}

model Institution {
  id             Int               @id @default(autoincrement())
  name           String
  type           InstitutionType
  address        String?
  phone          String?
  email          String?
  website        String?
  director       String?
  foundedYear    Int?
  totalBooks     Int               @default(0)
  totalMembers   Int               @default(0)
  operatingHours String?
  services       String[]          @default([])
  status         InstitutionStatus @default(ACTIVE)
  createdDate    DateTime          @default(now())
  lastUpdated    DateTime          @updatedAt

  @@map("institutions")
}

// Enums
enum UserType {
  STUDENT
  TEACHER
  PUBLIC

  @@map("user_type")
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  INACTIVE

  @@map("user_status")
}

enum LoanStatus {
  ACTIVE
  RETURNED
  OVERDUE

  @@map("loan_status")
}

enum ReservationStatus {
  ACTIVE
  FULFILLED
  EXPIRED
  CANCELLED

  @@map("reservation_status")
}

enum InstitutionType {
  LIBRARY
  SCHOOL
  UNIVERSITY

  @@map("institution_type")
}

enum InstitutionStatus {
  ACTIVE
  INACTIVE

  @@map("institution_status")
}
