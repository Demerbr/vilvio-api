import { BooksService } from './books.service';
import { CreateBookDto } from './dto/create-book.dto';
import { UpdateBookDto } from './dto/update-book.dto';
import { PaginationDto } from '../common/dto/pagination.dto';
export declare class BooksController {
    private readonly booksService;
    constructor(booksService: BooksService);
    create(createBookDto: CreateBookDto): Promise<{
        description: string | null;
        title: string;
        author: string;
        isbn: string | null;
        genre: string | null;
        publicationYear: number | null;
        publisher: string | null;
        pages: number | null;
        language: string | null;
        availableCopies: number;
        totalCopies: number;
        location: string | null;
        coverUrl: string | null;
        id: number;
        addedDate: Date;
        lastUpdated: Date;
    }>;
    findAll(paginationDto: PaginationDto): Promise<import("../common/dto/pagination.dto").PaginatedResult<{
        description: string | null;
        title: string;
        author: string;
        isbn: string | null;
        genre: string | null;
        publicationYear: number | null;
        publisher: string | null;
        pages: number | null;
        language: string | null;
        availableCopies: number;
        totalCopies: number;
        location: string | null;
        coverUrl: string | null;
        id: number;
        addedDate: Date;
        lastUpdated: Date;
    }>>;
    findAvailable(paginationDto: PaginationDto): Promise<import("../common/dto/pagination.dto").PaginatedResult<{
        description: string | null;
        title: string;
        author: string;
        isbn: string | null;
        genre: string | null;
        publicationYear: number | null;
        publisher: string | null;
        pages: number | null;
        language: string | null;
        availableCopies: number;
        totalCopies: number;
        location: string | null;
        coverUrl: string | null;
        id: number;
        addedDate: Date;
        lastUpdated: Date;
    }>>;
    findByGenre(genre: string, paginationDto: PaginationDto): Promise<import("../common/dto/pagination.dto").PaginatedResult<{
        description: string | null;
        title: string;
        author: string;
        isbn: string | null;
        genre: string | null;
        publicationYear: number | null;
        publisher: string | null;
        pages: number | null;
        language: string | null;
        availableCopies: number;
        totalCopies: number;
        location: string | null;
        coverUrl: string | null;
        id: number;
        addedDate: Date;
        lastUpdated: Date;
    }>>;
    findPopular(limit?: number): Promise<{
        description: string | null;
        title: string;
        author: string;
        isbn: string | null;
        genre: string | null;
        publicationYear: number | null;
        publisher: string | null;
        pages: number | null;
        language: string | null;
        availableCopies: number;
        totalCopies: number;
        location: string | null;
        coverUrl: string | null;
        id: number;
        addedDate: Date;
        lastUpdated: Date;
    }[]>;
    getStatistics(): Promise<any>;
    findOne(id: number): Promise<{
        description: string | null;
        title: string;
        author: string;
        isbn: string | null;
        genre: string | null;
        publicationYear: number | null;
        publisher: string | null;
        pages: number | null;
        language: string | null;
        availableCopies: number;
        totalCopies: number;
        location: string | null;
        coverUrl: string | null;
        id: number;
        addedDate: Date;
        lastUpdated: Date;
    }>;
    update(id: number, updateBookDto: UpdateBookDto): Promise<{
        description: string | null;
        title: string;
        author: string;
        isbn: string | null;
        genre: string | null;
        publicationYear: number | null;
        publisher: string | null;
        pages: number | null;
        language: string | null;
        availableCopies: number;
        totalCopies: number;
        location: string | null;
        coverUrl: string | null;
        id: number;
        addedDate: Date;
        lastUpdated: Date;
    }>;
    updateAvailableCopies(id: number, increment: number): Promise<{
        description: string | null;
        title: string;
        author: string;
        isbn: string | null;
        genre: string | null;
        publicationYear: number | null;
        publisher: string | null;
        pages: number | null;
        language: string | null;
        availableCopies: number;
        totalCopies: number;
        location: string | null;
        coverUrl: string | null;
        id: number;
        addedDate: Date;
        lastUpdated: Date;
    }>;
    remove(id: number): Promise<{
        message: string;
    }>;
}
